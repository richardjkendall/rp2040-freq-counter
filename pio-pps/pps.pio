.program pps
main:
    pull noblock        ; get inbound data if it is there
    jmp pin trigger     ; jump to trigger if signal pin is high
    jmp main            ; go back round the loop as pin is low
trigger:
    mov isr osr         ; move value from OSR (which is the pulse count sent from the other SM via DMA)
    push noblock        ; push ISR to CPU
    irq set 0           ; set IRQ so CPU can handle the PPS
wait_for_low:
    pull noblock            ; pull again if inbound data is there
    jmp pin wait_for_low    ; if pin is still high then keep waiting to go low
    jmp main                ; pin is low, we start again

% c-sdk {
static inline void pps_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_sm_config c = pps_program_get_default_config(offset);

    // set IN base pin to provided `pin` parameter, this is the PPS signal pin
    sm_config_set_in_pins(&c, pin);

    // set pins to in direction
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);

    // connect GPIOs to this PIO block
    pio_gpio_init(pio, pin);

    // set jmp pin
    sm_config_set_jmp_pin(&c, pin);
    


    // enable IRQ
    pio_set_irq0_source_enabled(pio, pis_interrupt0 + sm, true);

    // load our config
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, false);
}
%}